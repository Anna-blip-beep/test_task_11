{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c4b0545-7ebe-469d-b351-e8eb4c26c9c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Регулярные выражения, задание 2\n",
    "\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from collections import Counter\n",
    "import re\n",
    "\n",
    "def load_chapter():\n",
    "    url = \"https://www.gutenberg.org/files/4300/4300-h/4300-h.htm#chap01\"\n",
    "    response = requests.get(url)\n",
    "    html = response.text\n",
    "\n",
    "    soup = BeautifulSoup(html, \"html.parser\")\n",
    "    chapter = soup.find(id=\"chap01\")\n",
    "\n",
    "    if not chapter:\n",
    "        print(\"Не могу найти главу.\")\n",
    "        return \"\"\n",
    "\n",
    "    text = \"\"\n",
    "\n",
    "    for elem in chapter.find_all_next():\n",
    "        if elem.name == \"h2\" and \"chap\" in elem.get(\"id\", \"\"):\n",
    "            break\n",
    "        if elem.name == \"p\":\n",
    "            text += elem.get_text() + \"\\n\"\n",
    "\n",
    "    return text\n",
    "\n",
    "def count_words(text):\n",
    "    words = re.findall(r'\\b\\w+\\b', text.lower())\n",
    "    return Counter(words)\n",
    "\n",
    "def find_word_context(text, word, left_len=5, right_len=5, cut_length=False, out_file=\"context.txt\"):\n",
    "    word = word.lower()\n",
    "    words = re.findall(r'\\b\\w+\\b', text.lower())\n",
    "    sentences = split_into_sentences(text)\n",
    "\n",
    "    results = []\n",
    "\n",
    "    for i, current_word in enumerate(words):\n",
    "        if current_word == word:\n",
    "            left_start = max(0, i - left_len)\n",
    "            left_context = words[left_start:i]\n",
    "\n",
    "            right_end = min(len(words), i + right_len + 1)\n",
    "            right_context = words[i + 1:right_end]\n",
    "\n",
    "            if cut_length:\n",
    "                for sentence in sentences:\n",
    "                    if current_word in sentence:\n",
    "                        sentence_words = re.findall(r'\\b\\w+\\b', sentence.lower())\n",
    "                        word_pos = sentence_words.index(current_word)\n",
    "\n",
    "                        left_context = sentence_words[max(0, word_pos - left_len):word_pos]\n",
    "                        right_context = sentence_words[word_pos + 1:word_pos + 1 + right_len]\n",
    "                        break\n",
    "\n",
    "            context_string = f\"{' '.join(left_context)} [**{word}**] {' '.join(right_context)}\"\n",
    "            results.append(context_string)\n",
    "\n",
    "    print(f\"\\nНайдено {len(results)} раз(а) слово '{word}':\")\n",
    "    for line in results:\n",
    "        print(line)\n",
    "\n",
    "    with open(out_file, \"w\", encoding=\"utf-8\") as file:\n",
    "        for line in results:\n",
    "            file.write(line + \"\\n\")\n",
    "\n",
    "    print(f\"\\nРезультаты записаны в файл: {out_file}\")\n",
    "\n",
    "def split_into_sentences(text):\n",
    "    return re.split(r'(?<=[.!?])\\s+', text)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"Загружаем текст...\")\n",
    "    loaded_text = load_chapter()\n",
    "\n",
    "    if not loaded_text:\n",
    "        print(\"Не удалось загрузить текст.\")\n",
    "    else:\n",
    "        print(\"Текст загружен.\")\n",
    "\n",
    "        word_counts = count_words(loaded_text)\n",
    "        print(\"\\nЧастота слов:\")\n",
    "        for word, count in word_counts.most_common(20):\n",
    "            print(f\"{word}: {count}\")\n",
    "\n",
    "        target_word = input(\"\\nВведите слово для поиска: \").strip().lower()\n",
    "        left_context = int(input(\"Введите длину левого контекста: \"))\n",
    "        right_context = int(input(\"Введите длину правого контекста: \"))\n",
    "        cut_context = input(\"Обрезать контекст? (да/нет): \").strip().lower() == \"да\"\n",
    "\n",
    "        find_word_context(loaded_text, target_word, left_context, right_context, cut_context)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3480f37-ced2-4059-9b3d-b7cb26b2789e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
